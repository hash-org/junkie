{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "fileTypes": ["hash"],
    "name": "Hash",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#call"
        },
        {
            "include": "#indexing"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "constants": {
            "patterns": [
                {
                    "match": "(?<!\\$)\\b(true|false)\\b(?!\\$)",
                    "name": "constant.language.bool.hash"
                },
                {
                    "comment": "decimal integers and floats",
                    "name": "constant.numeric.hash",
                    "match": "\\b\\d[\\d_]*(\\.?)[\\d_]*([eE]([+-])?([\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|ibig|u128|u16|u32|u64|u8|usize|ubig)?\\b"
                },
                {
                    "comment": "hexadecimal integers",
                    "name": "constant.numeric.hex.hash",
                    "match": "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|ibig|u128|u16|u32|u64|u8|usize|ubig)?\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.numeric.hash"
                        }
                    }
                },
                {
                    "comment": "octal integers",
                    "name": "constant.numeric.oct.hash",
                    "match": "\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|ibig|u128|u16|u32|u64|u8|usize|ubig)?\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.numeric.hash"
                        }
                    }
                },
                {
                    "comment": "binary integers",
                    "name": "constant.numeric.bin.hash",
                    "match": "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|ibig|u128|u16|u32|u64|u8|usize|ubig)?\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.numeric.hash"
                        }
                    }
                },
                {
                    "comment": "Matching type arguments",
                    "name": "support.type.typevar.hash",
                    "match": "\\b([A-Z])\\b"
                }
            ]
        },
        "storage": {
            "patterns": [
                {
                    "name": "storage.modifier.visibility.hash",
                    "match": "\\b(pub|priv)\\b"
                },
                {
                    "name": "storage.modifier.mutable.hash",
                    "match": "\\b(mut)\\b"
                },
                {
                    "name": "storage.type.module.hash",
                    "match": "\\b(mod)\\b"
                }
            ]
        },
        "call": {
            "patterns": [
                {
                    "comment": "function/method calls",
                    "name": "meta.call.hash",
                    "begin": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.call.hash"
                        },
                        "2": {
                            "name": "punctuation.brackets.round.hash"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.round.hash"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#constants"
                        },
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#variables"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#strings"
                        }
                    ]
                }
            ]
        },
        "indexing": {
            "patterns": [
                {
                    "name": "meta.index.field.hash",
                    "match": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*",
                    "captures": {
                        "1": {
                            "name": "variable.other.hash"
                        },
                        "2": {
                            "name": "punctuation.dot.hash"
                        }
                    }
                },
                {
                    "name": "meta.index.array.hash",
                    "begin": "(\\[)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.begin.square-bracket.hash"
                        }
                    },
                    "end": "(\\])",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.end.square-bracket.hash"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                },
                {
                    "name": "meta.index.other.hash",
                    "match": "(\\.)",
                    "captures": {
                        "1": {
                            "name": "punctuation.dot.hash"
                        }
                    }
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "comment": "Common built-in hash functions",
                    "name": "support.function.hash",
                    "match": "\\b(panic|input|print|conv|iter)\\b"
                },
                {
                    "comment": "function definition",
                    "name": "meta.function.definition.hash",
                    "begin": "((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(=>)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.begin.bracket"
                        },
                        "2": {
                            "name": "keyword.operator.closure.hash"
                        }
                    },
                    "end": "\\{|;",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.curly.hash"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#constants"
                        },
                        {
                            "include": "#variables"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#call"
                        },
                        {
                            "include": "#indexing"
                        },
                        {
                            "include": "#strings"
                        }
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "(?<!\\$)\\bas\\b(?!\\$)",
                    "name": "keyword.cast.hash"
                },
                {
                    "name": "variable.language.self.hash",
                    "match": "\\b(self)\\b"
                },
                {
                    "name": "keyword.other.unsafe.hash",
                    "match": "\\b(unsafe)\\b"
                },
                {
                    "match": "(?<!\\$)\\b(if|else|match|loop|while|unsafe|for|in|break|continue|return|import)\\b(?!\\$)",
                    "name": "keyword.control.hash"
                },
                {
                    "match": "(?<!\\$)\\b(struct|enum|trait|impl|mod|type)\\b(?!\\$)",
                    "name": "keyword.declaration.hash"
                },
                {
                    "match": "(<<|>>|~|\\^|\\||&)",
                    "name": "keyword.operator.bitwise.hash"
                },
                {
                    "match": "((&|\\^|\\||<<|>>)=)",
                    "name": "keyword.operator.assignment.bitwise.hash"
                },
                {
                    "match": "(=>)",
                    "name": "keyword.operator.closure.hash"
                },
                {
                    "match": "(==?|!=|<=?|>=?)",
                    "name": "keyword.operator.comparison.hash"
                },
                {
                    "match": "(([+*/%-]|\\~)=)",
                    "name": "keyword.operator.assignment.arithmetic.hash"
                },
                {
                    "match": "(=)",
                    "name": "keyword.operator.assignment.hash"
                },
                {
                    "match": "(\\-|\\+|\\*|\\/|\\~\\/|%)",
                    "name": "keyword.operator.arithmetic.hash"
                },
                {
                    "match": "(!|&&|\\|\\|)",
                    "name": "keyword.operator.logical.hash"
                },
                {
                    "match": "((&&|\\|\\|)=)",
                    "name": "keyword.operator.assignment.logical.hash"
                },
                {
                    "name": "storage.type.hash",
                    "match": "\\b(enum|struct|trait|type)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "comment": "parametrised types",
                    "begin": "\\b([A-Z][A-Za-z0-9]*)(<)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.type.hash"
                        },
                        "2": {
                            "name": "punctuation.brackets.angle.hash"
                        }
                    },
                    "end": ">",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.angle.hash"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#block-comments"
                        },
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#variables"
                        },
                        {
                            "include": "#punctuation"
                        }
                    ]
                },
                {
                    "comment": "primitive types",
                    "name": "entity.name.type.primitive.hash",
                    "match": "\\b(bool|char|str|u8|u16|u32|u64|i8|i16|i32|i64|usize|isize|f32|f64|void|never)\\b"
                },
                {
                    "name": "storage.modifier.visibility.hash",
                    "match": "\\b(pub|priv)\\b"
                },
                {
                    "name": "storage.modifier.mutable.hash",
                    "match": "\\b(mut)\\b"
                },
                {
                    "comment": "trait declarations",
                    "begin": "\\b(trait)\\s*(\\{)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.hash"
                        },
                        "2": {
                            "name": "entity.name.type.trait.hash"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.curly.hash"
                        }
                    }
                },
                {
                    "comment": "struct declarations",
                    "begin": "\\b(struct)\\s*(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.hash"
                        },
                        "2": {
                            "name": "entity.name.type.struct.hash"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.round.hash"
                        }
                    }
                },
                {
                    "comment": "enum declarations",
                    "begin": "\\b(enum)\\s*(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.hash"
                        },
                        "2": {
                            "name": "entity.name.type.enum.hash"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.round.hash"
                        }
                    }
                },
                {
                    "comment": "types",
                    "name": "entity.name.type.hash",
                    "match": "\\b[A-Z][A-Za-z0-9]*\\b(?!!)"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "comment": "variables",
                    "name": "variable.other.hash",
                    "match": "\\b(?<!(?<!\\.)\\.)[a-z0-9_]+\\b"
                },
                {
                    "match": "(?<!\\$)\\bself\\b(?!\\$)",
                    "name": "variable.language.self.hash"
                },
                {
                    "match": "(pub|priv)\\s+([a-zA-Z0-9_]+)(\\:\\s+)([a-zA-Z0-9_]+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.hash"
                        },
                        "2": {
                            "name": "variable.other.hash"
                        },
                        "3": {
                            "name": "punctuation.separator.type.hash"
                        },
                        "4": {
                            "name": "entity.name.type.hash"
                        }
                    }
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.hash",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "include": "#escapes"
                        }
                    ]
                },
                {
                    "begin": "'",
                    "end": "'",
                    "name": "string.quoted.single.hash",
                    "patterns": [
                        {
                            "include": "#escapes"
                        }
                    ]
                }
            ]
        },
        "escapes": {
            "comment": "escapes: ASCII, byte, Unicode, quote, regex",
            "name": "constant.character.escape.rust",
            "match": "(\\\\)(?:(?:(x[0-7][0-7a-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
            "captures": {
                "1": {
                    "name": "constant.character.escape.backslash.hash"
                },
                "2": {
                    "name": "constant.character.escape.bit.hash"
                },
                "3": {
                    "name": "constant.character.escape.unicode.hash"
                },
                "4": {
                    "name": "constant.character.escape.unicode.punctuation.hash"
                },
                "5": {
                    "name": "constant.character.escape.unicode.punctuation.hash"
                }
            }
        },
        "comments": {
            "patterns": [
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.hash"
                        }
                    },
                    "match": "/\\*\\*/",
                    "name": "comment.block.empty.hash"
                },
                {
                    "include": "#comments-inline"
                }
            ]
        },
        "comments-inline": {
            "patterns": [
                {
                    "include": "#comments-block"
                },
                {
                    "captures": {
                        "1": {
                            "name": "comment.line.double-slash.hash"
                        }
                    },
                    "match": "((//).*)$"
                }
            ]
        },
        "comments-block": {
            "patterns": [
                {
                    "begin": "/\\*",
                    "end": "\\*/",
                    "name": "comment.block.hash",
                    "patterns": [
                        {
                            "include": "#comments-block"
                        }
                    ]
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "match": ",",
                    "name": "punctuation.comma.hash"
                },
                {
                    "match": ";",
                    "name": "punctuation.terminator.hash"
                },
                {
                    "match": "\\.",
                    "name": "punctuation.dot.hash"
                },
                {
                    "match": "\\.\\.\\.",
                    "name": "punctuation.spread.hash"
                },
                {
                    "match": "\\:\\:",
                    "name": "punctuation.namespace.hash"
                }
            ]
        }
    },
    "scopeName": "source.hash"
}
